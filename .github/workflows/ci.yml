name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  lint-and-typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint frontend
        run: npm run lint:frontend
      
      - name: Lint API
        run: npm run lint:api
      
      - name: Type check frontend
        run: npm run typecheck:frontend
      
      - name: Type check API
        run: npm run typecheck:api

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      nats:
        image: nats:2
        options: >-
          --health-cmd "curl -f http://localhost:8222/healthz"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --command "-js -m 8222"
        ports:
          - 4222:4222
          - 8222:8222
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Node.js dependencies
        run: npm ci
      
      - name: Install Python dependencies
        run: |
          cd workers
          pip install -r requirements.txt
      
      - name: Run frontend tests
        run: npm run test:frontend
        env:
          CI: true
      
      - name: Run API tests
        run: npm run test:api
        env:
          CI: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          NATS_URL: nats://localhost:4222

  e2e-test:
    runs-on: ubuntu-latest
    needs: [test]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: e2e_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      nats:
        image: nats:2
        options: >-
          --health-cmd "curl -f http://localhost:8222/healthz"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --command "-js -m 8222"
        ports:
          - 4222:4222
          - 8222:8222

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Node.js dependencies
        run: npm ci

            - name: Install Python dependencies
        run: |
          cd workers
          pip install -r requirements.txt

      - name: Setup monitoring stack
        run: |
          # Start monitoring services for integration tests
          docker run -d --name prometheus -p 9090:9090 prom/prometheus:latest
          docker run -d --name grafana -p 3002:3000 grafana/grafana:latest
          docker run -d --name jaeger -p 16686:16686 jaegertracing/all-in-one:latest

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/e2e_db
          REDIS_URL: redis://localhost:6379
          NATS_URL: nats://localhost:4222
          E2E_TEST: true

  build:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, e2e-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/pitch-advisor-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/pitch-advisor-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push workers
        uses: docker/build-push-action@v5
        with:
          context: ./workers
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/pitch-advisor-workers:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, e2e-test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
